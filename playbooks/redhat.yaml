---
- name: Deploy CloudLens Agent to Red Hat VMs with Docker
  hosts: redhat_prod_vms
  become: yes

  vars:
    docker_command: "{{ 'sudo docker' if ansible_user != 'root' else 'docker' }}"

  tasks:
    - name: Gather facts about the system
      ansible.builtin.setup:

    - name: Check if Docker is installed (multiple methods)
      ansible.builtin.shell: |
        if command -v docker &> /dev/null; then
          echo "found via command"
          exit 0
        elif [ -x /usr/bin/docker ]; then
          echo "found at /usr/bin/docker"
          exit 0
        elif [ -x /usr/local/bin/docker ]; then
          echo "found at /usr/local/bin/docker"
          exit 0
        else
          echo "Docker not found"
          exit 1
        fi
      register: docker_check
      failed_when: false
      changed_when: false

    - name: Debug Docker installation status
      debug:
        msg: "Docker check result: {{ docker_check.stdout }} (rc={{ docker_check.rc }})"

    - name: Install Docker if not present
      when: docker_check.rc != 0
      block:
        - name: Install Docker prerequisites
          ansible.builtin.package:
            name:
              - yum-utils
              - device-mapper-persistent-data
              - lvm2
            state: present

        - name: Add Docker repository
          ansible.builtin.yum_repository:
            name: docker-ce-stable
            description: Docker CE Stable - $basearch
            baseurl: https://download.docker.com/linux/centos/$releasever/$basearch/stable
            enabled: yes
            gpgcheck: yes
            gpgkey: https://download.docker.com/linux/centos/gpg

        - name: Install Docker CE
          ansible.builtin.package:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-compose-plugin
            state: present

        - name: Start and enable Docker service
          ansible.builtin.systemd:
            name: docker
            state: started
            enabled: yes

    - name: Verify Docker installation
      ansible.builtin.command: docker --version
      register: docker_version
      changed_when: false

    - name: Display Docker version
      debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    - name: Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /var/log/cloudlens
        - /var/tmp/cloudtap
        - /etc/docker/certs.d

    - name: Check current registry configuration
      ansible.builtin.stat:
        path: "/etc/docker/daemon.json"
      register: daemon_json_stat

    - name: Configure Docker for insecure registry
      when: registry_type == "insecure"
      block:
        - name: Read existing daemon.json if it exists
          ansible.builtin.slurp:
            src: /etc/docker/daemon.json
          register: existing_daemon_json
          when: daemon_json_stat.stat.exists
          failed_when: false

        - name: Parse existing daemon.json
          set_fact:
            daemon_config: "{{ existing_daemon_json.content | b64decode | from_json if daemon_json_stat.stat.exists else {} }}"

        - name: Update daemon.json with insecure registry
          copy:
            dest: /etc/docker/daemon.json
            content: "{{ daemon_config | combine({'insecure-registries': (daemon_config['insecure-registries'] | default([])) + [cloudlens_manager_ip_or_FQDN] if cloudlens_manager_ip_or_FQDN not in (daemon_config['insecure-registries'] | default([])) else daemon_config['insecure-registries'] | default([])}) | to_nice_json }}"
            mode: '0644'
            backup: yes
          register: daemon_config_changed

        - name: Reload Docker daemon
          ansible.builtin.systemd:
            name: docker
            state: reloaded
          when: daemon_config_changed.changed

    - name: Handle secure registry configuration
      when: registry_type == "secure"
      block:
        - name: Create CA certificate directory for Docker
          ansible.builtin.file:
            path: "/etc/docker/certs.d/{{ cloudlens_manager_ip_or_FQDN }}"
            state: directory
            mode: '0755'

        - name: Transfer CA certificate for Docker
          copy:
            src: "{{ local_ca_path }}"
            dest: "/etc/docker/certs.d/{{ cloudlens_manager_ip_or_FQDN }}/ca.crt"
            mode: '0644'
          register: docker_ca_cert_copied

        - name: Copy CA certificate to system trust store
          copy:
            src: "{{ local_ca_path }}"
            dest: "/etc/pki/ca-trust/source/anchors/cloudlens-ca.crt"
            mode: '0644'
          register: ca_trust_copied

        - name: Update CA trust
          ansible.builtin.command: update-ca-trust extract
          when: docker_ca_cert_copied.changed or ca_trust_copied.changed

    - name: Check if CloudLens container exists
      ansible.builtin.command: "{{ docker_command }} ps -a --format '{{'{{.Names}}'}}' --filter name={{ cloudlens_agent_container_name }}"
      register: existing_container
      changed_when: false
      failed_when: false

    - name: Display current container status
      debug:
        msg: "{{ 'Existing CloudLens container found - will be replaced' if cloudlens_agent_container_name in existing_container.stdout_lines else 'No existing CloudLens container found - will perform fresh installation' }}"

    - name: Stop existing CloudLens container if running
      ansible.builtin.command: "{{ docker_command }} stop {{ cloudlens_agent_container_name }}"
      when: cloudlens_agent_container_name in existing_container.stdout_lines
      register: container_stopped
      failed_when: false
      changed_when: container_stopped.rc == 0

    - name: Remove existing CloudLens container
      ansible.builtin.command: "{{ docker_command }} rm -f {{ cloudlens_agent_container_name }}"
      when: cloudlens_agent_container_name in existing_container.stdout_lines
      register: container_removed
      changed_when: true

    - name: Remove CloudLens sensor image to ensure new pull
      ansible.builtin.command: "{{ docker_command }} rmi {{ cloudlens_manager_ip_or_FQDN }}/sensor:latest"
      register: image_removed
      failed_when: false
      changed_when: image_removed.rc == 0

    - name: Pull new CloudLens sensor image
      ansible.builtin.command: >
        {{ docker_command }} pull
        {{ cloudlens_manager_ip_or_FQDN }}/sensor:latest
      register: image_pull
      retries: 3
      delay: 10
      until: image_pull.rc == 0

    - name: Deploy new CloudLens Agent container
      ansible.builtin.shell: |
        {{ docker_command }} run -d \
        -v /lib/modules:/lib/modules:ro \
        -v /var/log/cloudlens:/var/log/cloudlens \
        -v /var/tmp/cloudtap:/var/cloudtap \
        -v /:/host:ro \
        {% if registry_type == 'secure' %}-v "{{ ca_cert_dir }}:/usr/local/share/ca-certificates:ro" {% endif %}\
        --cap-add NET_BROADCAST \
        --cap-add SYS_ADMIN \
        --cap-add SYS_MODULE \
        --cap-add SYS_RESOURCE \
        --cap-add NET_RAW \
        --cap-add NET_ADMIN \
        --security-opt label=disable \
        --name "{{ cloudlens_agent_container_name }}" \
        --restart=always \
        --net=host \
        --log-opt max-size="{{ log_max_size }}" \
        --log-opt max-file="{{ log_max_file }}" \
        {% if registry_type == 'secure' %}--env REQUESTS_CA_BUNDLE="{{ ca_cert_dir }}/cloudlenscerts.crt" {% endif %}\
        "{{ cloudlens_manager_ip_or_FQDN }}/sensor:latest" \
        --accept_eula yes \
        --loglevel debug \
        --project_key "{{ project_key }}" \
        --server "{{ cloudlens_manager_ip_or_FQDN }}" \
        --custom_tags "{{ custom_tags }}" \
        --ssl_verify {% if registry_type == 'secure' %}yes{% else %}no{% endif %}
      register: container_deploy

    - name: Wait for container to start
      ansible.builtin.pause:
        seconds: 10
      when: container_deploy.changed

    - name: Verify CloudLens Agent container is running
      ansible.builtin.command: "{{ docker_command }} ps --format '{{'{{.Names}}'}}' --filter name={{ cloudlens_agent_container_name }}"
      register: final_container_check
      changed_when: false
      failed_when: false

    - name: Get detailed container status
      ansible.builtin.shell: |
        {{ docker_command }} inspect {{ cloudlens_agent_container_name }} --format 'Status: {{'{{.State.Status}}'}}, Started: {{'{{.State.StartedAt}}'}}'
      register: detailed_status
      changed_when: false
      failed_when: false

    - name: Display container status
      debug:
        msg:
          - "Container deployment result: {{ 'SUCCESS' if cloudlens_agent_container_name in final_container_check.stdout_lines else 'FAILED' }}"
          - "Container status: {{ detailed_status.stdout | default('Not available') }}"
          - "Container is {{ 'running' if cloudlens_agent_container_name in final_container_check.stdout_lines else 'not running' }}"

    - name: Show container logs if deployment failed
      ansible.builtin.command: "{{ docker_command }} logs --tail 50 {{ cloudlens_agent_container_name }}"
      register: container_logs
      when: cloudlens_agent_container_name not in final_container_check.stdout_lines
      failed_when: false

    - name: Display logs if container failed to start
      debug:
        var: container_logs.stdout_lines
      when: container_logs is defined and container_logs.stdout_lines is defined

    - name: Final status check - Fail if container is not running
      fail:
        msg: |
          CloudLens container '{{ cloudlens_agent_container_name }}' failed to start!
          Please check the logs above for more details.
      when: cloudlens_agent_container_name not in final_container_check.stdout_lines
