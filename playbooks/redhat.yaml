- name: Deploy CloudLens Agent to Red Hat VMs with Podman
  hosts: "{{ target_group }}"
  become: yes
  vars_files:
    - ../vars/cloudlens.yaml

  tasks:
    - name: Gather facts
      setup:

    - name: Ensure CloudLens log directory exists
      file:
        path: /var/log/cloudlens
        state: directory
        mode: '0755'

    - name: Ensure CloudTap tmp directory exists
      file:
        path: /var/tmp/cloudtap
        state: directory
        mode: '0755'

    - name: Check if Podman is installed
      command: command -v podman
      register: podman_installed
      failed_when: false
      changed_when: false

    - name: Print Podman installation status
      debug:
        msg: "Podman is {{ 'installed' if podman_installed.rc == 0 else 'not installed' }}."

    - name: Show current enabled repos
      shell: |
        if command -v subscription-manager &> /dev/null; then
          subscription-manager repos --list-enabled
        elif command -v dnf &> /dev/null; then
          dnf repolist
        else
          yum repolist
        fi
      when: podman_installed.rc != 0
      register: repo_check
      changed_when: false

    - name: Debug enabled repos
      debug:
        msg: "{{ repo_check.stdout_lines }}"
      when: podman_installed.rc != 0

    - name: Enable official Red Hat repos (RHEL 8+)
      shell: |
        subscription-manager repos --enable=rhel-{{ ansible_distribution_major_version }}-for-x86_64-baseos-rpms
        subscription-manager repos --enable=rhel-{{ ansible_distribution_major_version }}-for-x86_64-appstream-rpms
      when:
        - podman_installed.rc != 0
        - ansible_distribution_major_version | int >= 8
        - ansible_os_family == 'RedHat'
      failed_when: false

    - name: Enable official Red Hat repos (RHEL 7)
      shell: |
        subscription-manager repos --enable=rhel-7-server-rpms
        subscription-manager repos --enable=rhel-7-server-extras-rpms
      when:
        - podman_installed.rc != 0
        - ansible_distribution_major_version | int == 7
        - ansible_os_family == 'RedHat'
      failed_when: false

    - name: Count available repos
      shell: "{{ 'dnf' if ansible_distribution_major_version|int >= 8 else 'yum' }} repolist | wc -l"
      register: repo_count
      changed_when: false
      when: podman_installed.rc != 0

    - name: Configure fallback CentOS Stream 8 repos
      copy:
        dest: /etc/yum.repos.d/centos8-stream.repo
        mode: '0644'
        content: |
          [baseos]
          name=CentOS Stream 8 - BaseOS
          baseurl=http://mirror.stream.centos.org/8-stream/BaseOS/x86_64/os/
          gpgcheck=0
          enabled=1

          [appstream]
          name=CentOS Stream 8 - AppStream
          baseurl=http://mirror.stream.centos.org/8-stream/AppStream/x86_64/os/
          gpgcheck=0
          enabled=1
      when:
        - ansible_distribution_major_version | int == 8
        - repo_count.stdout | int < 5

    - name: Configure fallback CentOS Stream 9 repos
      copy:
        dest: /etc/yum.repos.d/centos9-stream.repo
        mode: '0644'
        content: |
          [baseos]
          name=CentOS Stream 9 - BaseOS
          baseurl=http://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/
          gpgcheck=0
          enabled=1

          [appstream]
          name=CentOS Stream 9 - AppStream
          baseurl=http://mirror.stream.centos.org/9-stream/AppStream/x86_64/os/
          gpgcheck=0
          enabled=1
      when:
        - ansible_distribution_major_version | int == 9
        - repo_count.stdout | int < 5

    - name: Configure fallback CentOS 7 repos
      copy:
        dest: /etc/yum.repos.d/centos7.repo
        mode: '0644'
        content: |
          [base]
          name=CentOS 7 - Base
          baseurl=http://vault.centos.org/7.9.2009/os/x86_64/
          gpgcheck=0
          enabled=1

          [extras]
          name=CentOS 7 - Extras
          baseurl=http://vault.centos.org/7.9.2009/extras/x86_64/
          gpgcheck=0
          enabled=1
      when:
        - ansible_distribution_major_version | int == 7
        - repo_count.stdout | int < 5

    - name: Clean package manager cache
      command: "{{ 'dnf clean all' if ansible_distribution_major_version | int >= 8 else 'yum clean all' }}"
      when: repo_count.stdout | int < 5

    - name: Refresh package manager cache
      command: "{{ 'dnf makecache' if ansible_distribution_major_version | int >= 8 else 'yum makecache' }}"
      when: repo_count.stdout | int < 5
      ignore_errors: yes

    - name: Enable container-tools module (RHEL 8+)
      shell: dnf module enable -y container-tools
      when:
        - ansible_distribution_major_version | int >= 8
        - podman_installed.rc != 0
      failed_when: false

    - name: Install Podman on RHEL 8+
      dnf:
        name:
          - podman
          - container-selinux
        state: present
        disable_gpg_check: yes
      when:
        - podman_installed.rc != 0
        - ansible_distribution_major_version | int >= 8

    - name: Install Podman on RHEL 7
      yum:
        name: podman
        state: present
        disable_gpg_check: yes
      when:
        - podman_installed.rc != 0
        - ansible_distribution_major_version | int == 7

    - name: Get Podman version
      command: podman --version
      register: podman_version
      changed_when: false

    - name: Debug Podman version
      debug:
        msg: "{{ podman_version.stdout }}"

    - name: Add insecure registry config for Podman
      copy:
        dest: /etc/containers/registries.conf.d/cloudlens.conf
        content: |
          [[registry]]
          location = "{{ cloudlens_manager_ip_or_FQDN }}"
          insecure = true
        mode: '0644'
      when: registry_type == "insecure"

    - name: Restart Podman socket
      command: systemctl restart podman.socket
      when: registry_type == "insecure"
      ignore_errors: yes

    - name: Transfer CA cert for secure registries
      copy:
        src: "{{ local_ca_path }}"
        dest: "{{ ca_cert_dir }}/cloudlenscerts.crt"
        mode: '0644'
      when: registry_type == "secure"

    - name: Update system trust store
      command: update-ca-trust extract
      when: registry_type == "secure"

    - name: Remove existing CloudLens container if it exists
      shell: podman rm -f {{ cloudlens_agent_container_name }}
      ignore_errors: yes

    - name: Pull CloudLens sensor image
      shell: >
        podman pull
        {% if registry_type == 'insecure' %}--tls-verify=false{% endif %}
        {{ cloudlens_manager_ip_or_FQDN }}/sensor:latest

    - name: Run CloudLens agent container
      shell: |
        podman run -d \
        -v /lib/modules:/lib/modules \
        -v /var/log/cloudlens:/var/log/cloudlens \
        -v /var/tmp/cloudtap:/var/cloudtap \
        -v /:/host \
        {% if registry_type == 'secure' %}-v "{{ ca_cert_dir }}:/usr/local/share/ca-certificates:ro" {% endif %} \
        --cap-add NET_BROADCAST --cap-add SYS_ADMIN --cap-add SYS_MODULE --cap-add SYS_RESOURCE --cap-add NET_RAW --cap-add NET_ADMIN \
        --security-opt label=disable \
        --name "{{ cloudlens_agent_container_name }}" \
        --restart=always \
        --net=host \
        --log-opt max-size="{{ log_max_size }}" --log-opt max-file="{{ log_max_file }}" \
        "{{ cloudlens_manager_ip_or_FQDN }}/sensor:latest" \
        --accept_eula yes \
        --loglevel debug \
        --project_key "{{ project_key }}" \
        --server "{{ cloudlens_manager_ip_or_FQDN }}" \
        --custom_tags "{{ target_group | default('default') }}" \
        --ssl_verify {% if registry_type == 'secure' %}yes{% else %}no{% endif %}

    - name: Check if CloudLens agent is running
      shell: podman inspect -f '{{"{{"}}.State.Status{{"}}"}}' {{ cloudlens_agent_container_name }}
      register: agent_status
      changed_when: false
      failed_when: false

    - name: Show CloudLens container status
      debug:
        msg: "CloudLens agent container is {{ agent_status.stdout | default('NOT FOUND') }}"
