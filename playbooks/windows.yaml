---
- name: Deploy CloudLens Agent to Windows VMs
  hosts: "{{ target_group }}"
  become: no
  vars_files:
    - ../vars/cloudlens.yaml
  
  tasks:
    - name: Ensure C:\temp directory exists
      win_file:
        path: C:\temp
        state: directory

    - name: Check for CloudLens Agent in registry
      win_shell: |
        $apps = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*, HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* -ErrorAction SilentlyContinue | 
          Where-Object { $_.DisplayName -like "*CloudLens*" }
        if ($apps) {
          @{
            Installed = $true
            DisplayName = $apps[0].DisplayName
            Version = $apps[0].DisplayVersion
          } | ConvertTo-Json
        } else {
          @{ Installed = $false } | ConvertTo-Json
        }
      register: cloudlens_installed_check
      changed_when: false

    - name: Parse installation check result
      set_fact:
        cloudlens_is_installed: "{{ (cloudlens_installed_check.stdout | from_json).Installed | default(false) }}"
        cloudlens_current_version: "{{ (cloudlens_installed_check.stdout | from_json).Version | default('Not installed') }}"

    - name: Display current installation status
      debug:
        msg: 
          - "CloudLens Agent installed: {{ cloudlens_is_installed }}"
          - "Current version: {{ cloudlens_current_version }}"

    - name: Handle SSL certificate if required
      when: ssl_verify | default('no') | lower == 'yes'
      block:
        - name: Copy CA certificate to Windows VM
          win_copy:
            src: "{{ local_ca_path }}"
            dest: C:\temp\cloudlens_ca.crt

        - name: Import CA cert into Trusted Root Certification Authorities
          win_certificate_store:
            path: C:\temp\cloudlens_ca.crt
            store_name: Root
            state: present

    - name: Perform CloudLens Agent installation/upgrade
      block:
        - name: Stop CloudLens service if running
          win_shell: |
            $service = Get-Service -Name CloudLens -ErrorAction SilentlyContinue
            if ($service -and $service.Status -eq "Running") {
              Stop-Service -Name CloudLens -Force
              Write-Output "stopped"
            } else {
              Write-Output "not_running"
            }
          when: cloudlens_is_installed

        - name: Kill CloudLens processes
          win_shell: |
            Get-Process | Where-Object { $_.ProcessName -like "*CloudLens*" } | Stop-Process -Force
          ignore_errors: yes
          when: cloudlens_is_installed

        - name: Uninstall existing CloudLens Agent
          win_shell: |
            $apps = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*, HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* -ErrorAction SilentlyContinue | 
              Where-Object { $_.DisplayName -like "*CloudLens*" }
            
            if ($apps) {
              foreach ($app in $apps) {
                $uninstallLines = $app.UninstallString -split "`n"
                
                # MSI
                $msiLine = $uninstallLines | Where-Object { $_ -match "MsiExec" } | Select-Object -First 1
                if ($msiLine -and $msiLine -match '\{([A-F0-9-]+)\}') {
                  $productCode = $matches[1]
                  $proc = Start-Process msiexec.exe -ArgumentList "/x {$productCode} /quiet /norestart" -Wait -PassThru
                }
                
                # EXE
                $exeLine = $uninstallLines | Where-Object { $_ -match "\.exe" } | Select-Object -First 1
                if ($exeLine) {
                  $exePath = $exeLine.Trim().Trim('"')
                  if (Test-Path $exePath) {
                    $proc = Start-Process -FilePath $exePath -ArgumentList "/uninstall /quiet" -Wait -PassThru
                  }
                }
              }
            }
          when: cloudlens_is_installed

        - name: Wait for uninstallation
          ansible.builtin.pause:
            seconds: 30
          when: cloudlens_is_installed

        - name: Remove registry entries
          win_shell: |
            Get-ChildItem HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall -ErrorAction SilentlyContinue | ForEach-Object {
              $props = Get-ItemProperty $_.PSPath
              if ($props.DisplayName -like "*CloudLens*") {
                Remove-Item $_.PSPath -Force -ErrorAction SilentlyContinue
              }
            }
          when: cloudlens_is_installed
          ignore_errors: yes

        - name: Remove program directory
          win_file:
            path: C:\Program Files\Keysight\CloudLens
            state: absent
          ignore_errors: yes

        - name: Transfer CloudLens Agent installer
          win_copy:
            src: "{{ local_installer_path }}"
            dest: C:\temp\{{ cloudlens_installer_filename }}

        - name: Install CloudLens Agent
          win_shell: |
            $arguments = @(
              "/install",
              "/quiet",
              "Server=`"{{ cloudlens_manager_ip_or_FQDN }}`"",
              "Project_Key=`"{{ project_key }}`"",
              "SSL_Verify=`"{{ ssl_verify | default('no') }}`"",
              "Auto_Update=`"{{ auto_update | default('yes') }}`"",
              "Custom_Tags=`"{{ custom_tags | default('') }}`""
            )
            
            $process = Start-Process -FilePath "C:\temp\{{ cloudlens_installer_filename }}" -ArgumentList $arguments -Wait -PassThru -NoNewWindow
            
            @{
              ExitCode = $process.ExitCode
            } | ConvertTo-Json
          register: silent_install_result

        - name: Parse installation result
          set_fact:
            install_exit_code: "{{ (silent_install_result.stdout | from_json).ExitCode | int }}"

        - name: Display installation result
          debug:
            msg: "Installation exit code: {{ install_exit_code }}"

        - name: Wait for service initialization
          ansible.builtin.pause:
            seconds: 60

        - name: Wait for config file
          win_shell: |
            $maxWait = 30
            $waited = 0
            while ($waited -lt $maxWait) {
              if (Test-Path "C:\ProgramData\CloudLens\Config\agent.yml") {
                exit 0
              }
              Start-Sleep -Seconds 2
              $waited += 2
            }
            exit 1
          failed_when: false

    - name: Verify CloudLens Agent is running
      win_shell: |
        $service = Get-Service -Name "CloudLens" -ErrorAction SilentlyContinue
        $process = Get-Process | Where-Object { $_.ProcessName -like "*CloudLens*" }
        
        @{
          ServiceExists = [bool]$service
          ServiceStatus = if ($service) { $service.Status.ToString() } else { "Not Found" }
          ProcessRunning = [bool]$process
        } | ConvertTo-Json
      register: final_status_check
      changed_when: false

    - name: Parse final status
      set_fact:
        final_status: "{{ final_status_check.stdout | from_json }}"

    - name: Display final status
      debug:
        msg:
          - "Service exists: {{ final_status.ServiceExists }}"
          - "Service status: {{ final_status.ServiceStatus }}"
          - "Process running: {{ final_status.ProcessRunning }}"
          - "Result: {{ 'SUCCESS' if (final_status.ServiceStatus == 'Running' and final_status.ProcessRunning) else 'PARTIAL' }}"