---
- name: Cleanup CloudLens Agent from Ubuntu VMs (Docker remains untouched)
  hosts: ubuntu_vms
  become: yes

  tasks:
    - name: Check if Docker is installed
      ansible.builtin.command: command -v docker
      register: docker_installed
      failed_when: false
      changed_when: false

    - name: Display Docker status
      debug:
        msg: "Docker is {{ 'installed' if docker_installed.rc == 0 else 'not installed' }}"

    - name: Handle CloudLens container cleanup
      when: docker_installed.rc == 0
      block:
        - name: Check if CloudLens container exists
          ansible.builtin.command: docker ps -a --format '{{"{{.Names}}"}}' --filter name={{ cloudlens_agent_container_name | default('cloudlens-agent') }}
          register: container_exists
          changed_when: false
          failed_when: false

        - name: Stop and remove CloudLens agent container
          ansible.builtin.command: docker rm -f {{ cloudlens_agent_container_name | default('cloudlens-agent') }}
          when: (cloudlens_agent_container_name | default('cloudlens-agent')) in container_exists.stdout_lines
          register: container_removed

        - name: Check for CloudLens/sensor images
          ansible.builtin.shell: |
            docker images --format '{{"{{.Repository}}:{{.Tag}}"}}' | grep -E "^{{ cloudlens_manager_ip_or_FQDN | default('') }}/sensor" || true
          register: cloudlens_images
          changed_when: false

        - name: Remove CloudLens sensor image
          ansible.builtin.command: docker rmi {{ cloudlens_manager_ip_or_FQDN }}/sensor
          when: 
            - cloudlens_images.stdout != ""
            - cloudlens_manager_ip_or_FQDN is defined
          failed_when: false

    - name: Handle CloudLens certificate cleanup
      when: registry_type == "secure"
      block:
        - name: Remove CloudLens CA certificate from system
          ansible.builtin.file:
            path: "{{ ca_cert_dir | default('/usr/local/share/ca-certificates') }}/cloudlenscerts.crt"
            state: absent
          register: ca_cert_removed

        - name: Remove CloudLens certificate from Docker certs.d
          ansible.builtin.file:
            path: "/etc/docker/certs.d/{{ cloudlens_manager_ip_or_FQDN }}"
            state: absent
          when: cloudlens_manager_ip_or_FQDN is defined
          register: docker_cert_removed

        - name: Update CA certificates if any were removed
          ansible.builtin.command: update-ca-certificates
          when: ca_cert_removed.changed

    - name: Handle Docker daemon.json cleanup for CloudLens
      when: 
        - registry_type == "insecure"
        - cloudlens_manager_ip_or_FQDN is defined
      block:
        - name: Check if Docker daemon.json exists
          ansible.builtin.stat:
            path: /etc/docker/daemon.json
          register: daemon_json_stat

        - name: Process daemon.json to remove CloudLens registry
          when: daemon_json_stat.stat.exists
          block:
            - name: Read current daemon.json
              ansible.builtin.slurp:
                src: /etc/docker/daemon.json
              register: daemon_json_content

            - name: Parse daemon.json
              set_fact:
                daemon_config: "{{ daemon_json_content.content | b64decode | from_json }}"

            - name: Check if insecure-registries exists and contains CloudLens
              set_fact:
                has_cloudlens_registry: "{{ 'insecure-registries' in daemon_config and cloudlens_manager_ip_or_FQDN in daemon_config['insecure-registries'] }}"

            - name: Backup daemon.json before modification
              ansible.builtin.copy:
                src: /etc/docker/daemon.json
                dest: /etc/docker/daemon.json.backup.{{ ansible_date_time.epoch }}
                remote_src: yes
              when: has_cloudlens_registry

            - name: Remove CloudLens from insecure-registries
              when: has_cloudlens_registry
              block:
                - name: Create updated registry list
                  set_fact:
                    updated_registries: "{{ daemon_config['insecure-registries'] | reject('equalto', cloudlens_manager_ip_or_FQDN) | list }}"

                - name: Update daemon config
                  set_fact:
                    updated_daemon_config: "{{ daemon_config | combine({'insecure-registries': updated_registries}) if updated_registries else daemon_config | dict2items | rejectattr('key', 'equalto', 'insecure-registries') | list | items2dict }}"

                - name: Write updated daemon.json
                  ansible.builtin.copy:
                    dest: /etc/docker/daemon.json
                    content: "{{ updated_daemon_config | to_nice_json }}"
                    backup: yes
                  when: updated_daemon_config | length > 0

                - name: Remove empty daemon.json
                  ansible.builtin.file:
                    path: /etc/docker/daemon.json
                    state: absent
                  when: updated_daemon_config | length == 0

                - name: Restart Docker to apply changes
                  ansible.builtin.systemd:
                    name: docker
                    state: restarted
                  when: docker_installed.rc == 0

    - name: Remove CloudLens directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/log/cloudlens
        - /var/lib/cloudlens
        - /etc/cloudlens
      ignore_errors: yes

    - name: Display cleanup summary
      debug:
        msg:
          - "CloudLens cleanup completed"
          - "Container removed: {{ container_removed.changed | default(false) }}"
          - "Image removed: {{ (cloudlens_images.stdout | default('')) != '' }}"
          - "Certificates cleaned: {{ (ca_cert_removed.changed | default(false)) or (docker_cert_removed.changed | default(false)) }}"
          - "Docker daemon.json updated: {{ has_cloudlens_registry | default(false) }}"
          - "Docker remains installed and functional"
