- name: Deploy CloudLens Agent to Linux VMs
  hosts: azure_vms
  become: yes
  vars:
    cloudlens_manager_ip_or_FQDN: "20.12.10.80"
    project_key: "c09b143bedd64a7fb3f0b138a409ff66"
    custom_tags: "Env=Azure"
    local_ca_path: "/Users/brinketu/NewCerts/cloudlenscerts.crt"
    registry_type: "insecure"
    ca_cert_dir: ""

  tasks:
    - name: Gather facts about the system
      ansible.builtin.gather_facts:

    - name: Set CA certificate directory based on Linux distribution
      set_fact:
        ca_cert_dir: "{% if ansible_distribution | lower == 'ubuntu' %}/etc/ssl/certs{% else %}/etc/pki/tls/certs{% endif %}"

    - name: Check if Docker is installed
      shell: command -v docker || true
      register: docker_installed
      failed_when: false
      changed_when: false

    - name: Debug Docker installation status
      debug:
        msg: "Docker is {{ 'installed' if docker_installed.rc == 0 else 'not installed' }}."

    - name: Install Docker based on distribution if not installed
      when: docker_installed.rc != 0
      block:
        - name: Install Docker on Ubuntu
          when: ansible_distribution | lower == 'ubuntu'
          block:
            - name: Update the package index
              apt:
                update_cache: yes

            - name: Install prerequisites
              apt:
                name:
                  - apt-transport-https
                  - ca-certificates
                  - curl
                  - software-properties-common
                state: present

            - name: Add Docker's official GPG key
              shell: |
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              args:
                executable: /bin/bash
                creates: /usr/share/keyrings/docker-archive-keyring.gpg

            - name: Add Docker repository
              shell: |
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              args:
                executable: /bin/bash

            - name: Install Docker packages
              apt:
                name:
                  - docker-ce
                  - docker-ce-cli
                  - containerd.io
                state: latest

            - name: Ensure Docker service is enabled and started
              systemd:
                name: docker
                state: started
                enabled: true

        - name: Install Docker on CentOS/RHEL
          when: ansible_distribution | lower in ['centos', 'redhat']
          block:
                - name: Install Yum utilities
                  yum:
                    name: yum-utils
                    state: present
                  when: docker_installed.rc != 0

                - name: Add Docker repository
                  yum_repository:
                    name: docker-ce
                    description: Docker CE Repository
                    baseurl: https://download.docker.com/linux/centos/docker-ce.repo
                    gpgcheck: yes
                    enabled: yes
                  when: docker_installed.rc != 0

                - name: Install Docker packages
                  yum:
                    name:
                      - docker-ce
                      - docker-ce-cli
                      - containerd.io
                    state: latest
                  when: docker_installed.rc != 0

                - name: Ensure Docker service is enabled and started
                  systemd:
                    name: docker
                    state: started
                    enabled: true
                  when: docker_installed.rc != 0

    - name: Ensure Docker service is running
      command: systemctl is-active docker
      register: docker_service_status
      ignore_errors: yes

    - name: Start Docker service if it is not running
      systemd:
        name: docker
        state: started
      when: docker_service_status.stdout != "active"

    - name: Verify Docker service status after starting
      command: systemctl is-active docker
      register: docker_service_verification

    - name: Fail task if Docker service is not active
      fail:
        msg: "Docker service is not running. Please check the Docker installation."
      when: docker_service_verification.stdout != "active"

    - name: Ensure /etc/docker directory exists
      file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Reload systemd manager configuration
      shell: systemctl daemon-reload
      when: docker_installed.rc != 0

    - name: Verify Docker service file existence
      stat:
        path: /lib/systemd/system/docker.service
      register: docker_service_stat

    - name: Ensure Docker service is started
      systemd:
        name: docker
        state: started
      when: docker_service_stat.stat.exists

    - name: Verify Docker service status
      command: systemctl is-active docker
      register: docker_status
      failed_when: docker_status.stdout != "active"
      changed_when: false

    - name: Start Docker service if not active
      systemd:
        name: docker
        state: started
      when: docker_status.stdout != "active"

    - name: Configure Docker for insecure registry
      block:
        - name: Create Docker daemon configuration for insecure registry
          copy:
            dest: /etc/docker/daemon.json
            content: |
              {
                "insecure-registries": ["{{ cloudlens_manager_ip_or_FQDN }}"]
              }

        - name: Restart Docker service to apply changes
          systemd:
            name: docker
            state: restarted
      when: registry_type == "insecure"

    - name: Transfer CA certificate from local to VM
      copy:
        src: "{{ local_ca_path }}"
        dest: "/tmp/ca-certificates.crt"
      when: registry_type == "secure"

    - name: Install CA certificate
      block:
        - name: Install CA certificate for Ubuntu
          copy:
            src: "/tmp/ca-certificates.crt"
            dest: "{{ ca_cert_dir }}"
          when: ansible_distribution | lower == 'ubuntu'

        - name: Update CA certificates on Ubuntu
          command: update-ca-certificates
          when: ansible_distribution | lower == 'ubuntu'

        - name: Install CA certificate for CentOS/RHEL
          copy:
            src: "/tmp/ca-certificates.crt"
            dest: "{{ ca_cert_dir }}"
          when: ansible_distribution | lower in ['centos', 'redhat']

        - name: Update CA trust on CentOS/RHEL
          command: update-ca-trust extract
          when: ansible_distribution | lower in ['centos', 'redhat']
      when: registry_type == "secure"

    - name: Remove existing CloudLens agent container if exists
      shell: |
        docker ps -aq -f name=cloudlens-agent | xargs -r docker rm -f

    - name: Install CloudLens Agent
      shell: |
        docker run -v /lib/modules:/lib/modules \
        -v /var/log/cloudlens:/var/log/cloudlens \
        -v /:/host -v /var/run/docker.sock:/var/run/docker.sock \
        {% if registry_type == 'secure' %}-v {{ ca_cert_dir }}:/usr/local/share/ca-certificates:ro {% endif %} \
        --cap-add NET_BROADCAST --cap-add SYS_ADMIN --cap-add SYS_MODULE \
        --cap-add SYS_RESOURCE --cap-add NET_RAW \
        {% if registry_type == 'secure' %}--REQUESTS_CA_BUNDLE={{ ca_cert_dir }}/ca-certificates.crt {% endif %} \
        --cap-add NET_ADMIN \
        --name cloudlens-agent -d --restart=always --net=host \
        --log-opt max-size=50m --log-opt max-file=5 \
        "{{ cloudlens_manager_ip_or_FQDN }}/sensor" --accept_eula yes \
        --project_key "{{ project_key }}" --server "{{ cloudlens_manager_ip_or_FQDN }}" \
        --custom_tags "{{ custom_tags }}" --ssl_verify {% if registry_type == 'secure' %}yes{% else %}no{% endif %}
      when: docker_status.stdout == "active"