---
- name: Deploy CloudLens Agent to Red Hat VMs
  hosts: all
  become: yes
  vars_files:
    - vars.yaml

  tasks:
    - name: Gather facts about the system
      ansible.builtin.gather_facts:

    - name: Check if Docker is installed
      ansible.builtin.command: command -v docker
      register: docker_installed
      failed_when: false
      changed_when: false

    - name: Debug Docker installation status
      debug:
        msg: "Docker is {{ 'installed' if docker_installed.rc == 0 else 'not installed' }}."

    - name: Remove any malformed Docker repository files (Ubuntu-specific)
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list
        state: absent
      when: ansible_os_family == 'Debian'

    - name: Install prerequisites for Docker (RHEL/CentOS)
      ansible.builtin.yum:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present
      when: docker_installed.rc != 0 and ansible_os_family == 'RedHat'

    - name: Add Docker repository for Red Hat
      ansible.builtin.yum_repository:
        name: docker
        description: Docker CE Stable - $basearch
        baseurl: https://download.docker.com/linux/centos/7/$basearch/stable
        gpgcheck: yes
        gpgkey: https://download.docker.com/linux/centos/gpg
        enabled: yes
      when: docker_installed.rc != 0 and ansible_os_family == 'RedHat'

    - name: Install Docker packages (RHEL/CentOS)
      ansible.builtin.yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest
        update_cache: yes
      when: docker_installed.rc != 0 and ansible_os_family == 'RedHat'

    - name: Ensure Docker service is enabled and started
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
      when: docker_installed.rc != 0 or docker_status is not defined

    - name: Ensure Docker service is running
      ansible.builtin.systemd:
        name: docker
        state: started
      register: docker_status
      ignore_errors: yes

    - name: Fail task if Docker service is not active
      fail:
        msg: "Docker service is not running. Please check the Docker installation."
      when: docker_status.status.ActiveState != "active"

    - name: Ensure /etc/docker directory exists
      ansible.builtin.file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Configure Docker daemon for insecure registry (all platforms)
      copy:
        dest: "{{ docker_daemon_config_path }}"
        content: |
          {
            "insecure-registries": ["{{ cloudlens_manager_ip_or_FQDN }}"]
          }
        mode: '0644'
      when: registry_type == "insecure"

    - name: Restart Docker service to apply changes
      ansible.builtin.systemd:
        name: docker
        state: restarted
      when: registry_type == "insecure"

    - name: Transfer CA certificate from local to VM (for secure registries)
      copy:
        src: "{{ local_ca_path }}"
        dest: "{{ ca_cert_dir }}/cloudlenscerts.crt"
        mode: '0644'
      when: registry_type == "secure"

    - name: Update CA certificates on Red Hat (for secure registries)
      ansible.builtin.command: update-ca-trust extract
      become: yes
      when: registry_type == "secure"

    - name: Remove existing CloudLens agent container if exists
      community.docker.docker_container:
        name: "{{ cloudlens_agent_container_name }}"
        state: absent
      ignore_errors: yes

    - name: Install CloudLens Agent container
      ansible.builtin.shell: |
        docker run -v /lib/modules:/lib/modules \
        -v /var/log/cloudlens:/var/log/cloudlens \
        -v /:/host -v /var/run/docker.sock:/var/run/docker.sock \
        {% if registry_type == 'secure' %}-v "{{ ca_cert_dir }}:/usr/local/share/ca-certificates:ro" {% endif %} \
        --cap-add NET_BROADCAST --cap-add SYS_ADMIN --cap-add SYS_MODULE \
        --cap-add SYS_RESOURCE --cap-add NET_RAW \
        --cap-add NET_ADMIN \
        {% if registry_type == 'secure' %}--env REQUESTS_CA_BUNDLE="{{ ca_cert_dir }}/cloudlenscerts.crt" {% endif %} \
        --name "{{ cloudlens_agent_container_name }}" -d --restart=always --net=host \
        --log-opt max-size="{{ log_max_size }}" --log-opt max-file="{{ log_max_file }}" \
        "{{ cloudlens_manager_ip_or_FQDN }}/sensor" --accept_eula yes \
        --project_key "{{ project_key }}" --server "{{ cloudlens_manager_ip_or_FQDN }}" \
        --custom_tags "{{ custom_tags }}" --ssl_verify {% if registry_type == 'secure' %}yes{% else %}no{% endif %}
      when: docker_status.status.ActiveState == "active"